VALID_TOOLCHAINS := pnacl

# 项目名
TARGET = moonlight-chrome

# Include library makefiles
include common-c.mk
include opus.mk
include h264bitstream.mk
include libgamestream.mk
include ports.mk

EXTRA_INC_PATHS := $(EXTRA_INC_PATHS) $(COMMON_C_INCLUDE) $(OPUS_INCLUDE) $(H264BS_INCLUDE) $(LIBGS_C_INCLUDE) $(PORTS_INCLUDE)
EXTRA_LIB_PATHS := $(EXTRA_LIB_PATHS) $(PORTS_LIB_ROOT)

include $(NACL_SDK_ROOT)/tools/common.mk

# Dirty hack to allow 'make serve' to work in this directory
HTTPD_PY := $(HTTPD_PY) --no-dir-check

CHROME_ARGS += --allow-nacl-socket-api=localhost

# 函数库
LIBS = ppapi_gles2 ppapi ppapi_cpp pthread curl z ssl crypto nacl_io

# 额外编译参数
CFLAGS += -Wall $(COMMON_C_C_FLAGS) $(OPUS_C_FLAGS)
CXXFLAGS += -Wall

# 源文件
SOURCES = \
    $(OPUS_SOURCE)           \
    $(H264BS_SOURCE)         \
    $(COMMON_C_SOURCE)       \
    $(LIBGS_C_SOURCE)        \
    libchelper.c             \
    main.cpp                 \
    input.cpp                \
    gamepad.cpp              \
    connectionlistener.cpp   \
    viddec.cpp               \
    auddec.cpp               \
    http.cpp                 \
    profiling.cpp            \

# Build rules generated by macros from common.mk:
# 根据定义规则来带参数编译每个源
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# 接下来的六行定义了将目标文件链接到一个或多个可执行文件中的规则。
# 当TOOLCHAIN为时pnacl，仅生成一个可执行文件：在上面的示例中，part2.pexe。
# 当使用NaCl工具链时，将生成三个可执行文件，每个可执行文件用于一个体系结构：在上面的示例中part2_arm.nexe，part2_x86_32.nexe和 part2_x86_64.nexe。
# 如果CONFIG是Release，每个可执行文件也被脱除调试信息，减少文件大小。
# 否则，当TOOLCHAIN is pnacl为时，工作流涉及创建未剥离的二进制文件以进行调试，然后对其进行最终确定并剥离它以进行发布。
# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

# 生成NaCl清单文件
$(eval $(call NMF_RULE,$(TARGET),))
